using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using System.IO;
using BoldReports.Web.ReportViewer;
using BoldReports.Writer;

namespace PRzHealthcareAPI.Helpers
{
    public class BoldReportsApi
    {
        public BoldReportsApi()
        {

        }

        public static bool PrintPDF()
        {
            try
            {
                string base64String = ""; // provide your base64 report data
                byte[] bytes = Convert.FromBase64String(base64String);
                MemoryStream reportStream = new MemoryStream(bytes);
                BoldReports.Writer.ReportWriter writer = new BoldReports.Writer.ReportWriter();

                List<BoldReports.Web.ReportParameter> parameters = new List<BoldReports.Web.ReportParameter>()
                {
                    new BoldReports.Web.ReportParameter()
                    {
                        Name= "eventId",
                        Values = new List<string>(){ "4277" }
                    }
                };
                writer.SetParameters(parameters);
                

                writer.PDFOptions = new BoldReports.Writer.PDFOptions();
                writer.PDFOptions.EnableComplexScript = true;

                
                writer.ExportSettings.FileName = "file";
                string fileName = @"file.pdf";
                WriterFormat format = new WriterFormat();
                format = WriterFormat.PDF;

                writer.LoadReport(reportStream);
                MemoryStream pdfStream = new MemoryStream();
                writer.Save(pdfStream, BoldReports.Writer.WriterFormat.PDF);

                pdfStream.Position = 0;
                FileStreamResult fileStreamResult = new FileStreamResult(pdfStream, "application/pdf");
                fileStreamResult.FileDownloadName = fileName;

                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
            
        }
    }
}
